--- links-2.12/view.c
+++ links-2.12/view.c
@@ -3118,12 +3118,33 @@
 		return 1;
 	}
 	if (ev->ev == EV_KBD) {
+#if 1 /* ZIPIT_Z2 */
+		/* Add more conveient scroll keys for ZIPIT_Z2 */
+		if (ev->x == KBD_PAGE_DOWN || (upcase(ev->x) == 'F' && ev->y & KBD_CTRL) || (ev->x == KBD_DOWN && ev->y)) rep_ev(ses, fd, page_down, 0);
+		else if (ev->x == KBD_PAGE_UP || (upcase(ev->x) == 'B' && (!(ev->y & KBD_ALT))) || (ev->x == KBD_UP && ev->y)) rep_ev(ses, fd, page_up, 0);
+		else if ((ev->x == KBD_DOWN) || (ev->x == ' ' && !(ev->y & KBD_ALT) && !(ev->y & KBD_SHIFT))) rep_ev(ses, fd, scroll, 1 + !ses->kbdprefix.rep);		  
+		else if ((ev->x == KBD_UP) || (ev->x == ' ' && !(ev->y & KBD_ALT) && (ev->y & KBD_SHIFT))) rep_ev(ses, fd, scroll, -1 - !ses->kbdprefix.rep);
+		/* Use dpad arrow buttons to scroll ZIPIT_Z2 and use <,>. for URLS. */	
+		else if (ev->x == KBD_LEFT) rep_ev(ses, fd, hscroll, -1 - 7 * !ses->kbdprefix.rep);
+		else if (ev->x == KBD_RIGHT) rep_ev(ses, fd, hscroll, 1 + 7 * !ses->kbdprefix.rep);
+		/* Allow TAB, BACKTAB to traverse links on ZIPIT_Z2 */
+		else if ((ev->x == KBD_TAB) && ev->y) rep_ev(ses, fd, up, 0);
+		else if ((ev->x == KBD_TAB) && !ev->y) rep_ev(ses, fd, down, 0); /* Shift-tab doesn't seem to work. */
+		/* Zipit has KBD_INS on alt-tab so use it as backtab, at least until backtab (shift-tab) works. */
+		else if (ev->x == KBD_INS) rep_ev(ses, fd, up, 0);
+		/* Allow <,>. to also traverse links on ZIPIT_Z2 */
+		else if ((ev->x == ',') || (ev->x == '{') || (ev->x == '(')) rep_ev(ses, fd, up, 0);
+		else if ((ev->x == '.') || (ev->x == '}') || (ev->x == ')')) rep_ev(ses, fd, down, 0);
+		/* Every form of backup known to man (including ^H) should go back in histroy on Zipit. */
+		else if ((ev->x == KBD_BS) || (ev->x == KBD_DEL) || (ev->x == 8)) go_back(ses, 1);
+#else
 		if (ev->x == KBD_PAGE_DOWN || (ev->x == ' ' && (!(ev->y & KBD_ALT))) || (upcase(ev->x) == 'F' && ev->y & KBD_CTRL)) rep_ev(ses, fd, page_down, 0);
 		else if (ev->x == KBD_PAGE_UP || (upcase(ev->x) == 'B' && (!(ev->y & KBD_ALT)))) rep_ev(ses, fd, page_up, 0);
 		else if (ev->x == KBD_DOWN) rep_ev(ses, fd, down, 0);
 		else if (ev->x == KBD_UP) rep_ev(ses, fd, up, 0);
 		else if (ev->x == KBD_LEFT && ses->term->spec->braille) rep_ev(ses, fd, left, 0);
 		else if (ev->x == KBD_RIGHT && ses->term->spec->braille) rep_ev(ses, fd, right, 0);
+#endif
 		else if (ev->x == '{' && ses->term->spec->braille) rep_ev(ses, fd, cursor_home, 0);
 		else if (ev->x == '}' && ses->term->spec->braille) rep_ev(ses, fd, cursor_end, 0);
 		else if (upcase(ev->x) == 'Y' && !(ev->y & (KBD_CTRL | KBD_ALT)) && ses->term->spec->braille) rep_ev(ses, fd, cursor_word, 0);
@@ -3147,7 +3168,11 @@
 		else if (upcase(ev->x) == 'E' && ev->y & KBD_CTRL) rep_ev(ses, fd, scroll, 1);*/
 		else if (ev->x == KBD_HOME || (upcase(ev->x) == 'A' && ev->y & KBD_CTRL)) rep_ev(ses, fd, home, 0);
 		else if (ev->x == KBD_END || (upcase(ev->x) == 'E' && ev->y & KBD_CTRL)) rep_ev(ses, fd, x_end, 0);
+#if 1 /* ZIPIT_Z2 */
+		else if (ev->x == KBD_ENTER) {
+#else
 		else if ((ev->x == KBD_RIGHT && !ses->term->spec->braille) || ev->x == KBD_ENTER) {
+#endif
 			x = enter(ses, fd, 0);
 		} else if (ev->x == '*') {
 			ses->ds.images ^= 1;
@@ -3506,10 +3531,30 @@
 			next_frame(ses, ev->y ? -1 : 1);
 			draw_formatted(ses);
 		}
+#if 1 /* ZIPIT_Z2 */
+		/* Use dpad arrow buttons to scroll ZIPIT_Z2 and use <,>. for URLS. */	
+		if ((ev->y & KBD_ALT) && (ev->x == KBD_BS || ev->x == KBD_DEL || ev->x == 8) || (ev->x == '>')) {
+			go_back(ses, -1);
+			goto x;
+		}
+		if ((ev->x == KBD_BS) || (ev->x == KBD_DEL) || (ev->x == 8) || (ev->x == '<')) { /* 0x127 or 0x8 */
+			go_back(ses, 1);
+			goto x;
+		}
+		if (ev->x == '>') { /* 0x127 or 0x8 */
+			go_back(ses, -1);
+			goto x;
+		}
+#else
 		if (ev->x == KBD_LEFT && !ses->term->spec->braille) {
 			go_back(ses, 1);
 			goto x;
 		}
+		if (ev->x == KBD_RIGHT && !ses->term->spec->braille) {
+			go_back(ses, -1);
+			goto x;
+		}
+#endif		
 		if (upcase(ev->x) == 'Z' && !(ev->y & (KBD_CTRL | KBD_ALT))) {
 			go_back(ses, 1);
 			goto x;
--- links-2.12/view_gr.c
+++ links-2.12/view_gr.c
@@ -1048,6 +1048,46 @@
 	return scroll_vh(&fd->vs->view_posx, &fd->vs->orig_view_posx, fd->ses->scrolling == 2 ? &fd->ses->scrolltype : NULL, x, fd->f_data->x - fd->xw + fd->vsb * G_SCROLL_BAR_WIDTH);
 }
 
+#if 1 /* ZIPIT_Z2 */
+unsigned char scrollmark_file[MAX_STR_LEN]="";
+int read_scrollmark(struct session *ses, struct f_data_c *fd, int a)
+{
+	unsigned int pos = 0;
+	unsigned char *buf;
+
+	if (!*scrollmark_file)
+		snprintf(scrollmark_file,MAX_STR_LEN,"%sscrollmark.cfg",links_home?links_home:(unsigned char*)"");
+
+	buf=read_config_file(scrollmark_file);
+	if (a && buf){
+		pos = atoi(buf);
+		unset_link(fd);
+		/*
+		if (pos > fd->f_data->y - fd->yw + fd->f_data->hsb * G_SCROLL_BAR_WIDTH) {
+			return 0;
+		}
+		fd->vs->view_pos = pos;
+		fd->vs->orig_view_pos = fd->vs->view_pos;
+		return 3;
+		*/
+		return scroll_v(fd, fd->vs->view_pos-pos);
+	}
+	return 0;
+}
+
+static int write_scrollmark(struct session *ses, struct f_data_c *f)
+{
+	unsigned char buf[80];
+	unsigned int pos = 0;
+
+	if (!*scrollmark_file)
+	  read_scrollmark(ses, f, 0); /* 0 means just read, do not scroll*/
+
+	sprintf(buf, "%d\n", f->vs->view_pos);
+	write_to_config_file(scrollmark_file, buf);
+}
+#endif /* ZIPIT_Z2 */
+
 int g_frame_ev(struct session *ses, struct f_data_c *fd, struct links_event *ev)
 {
 	if (!fd->f_data) return 0;
@@ -1203,7 +1243,12 @@
 				html_interpret_recursive(ses->screen);
 				return 1;
 			}
+#if 1 /* ZIPIT_Z2 */
+			/* disable KBD_RIGHT for selecting link -- we Use dpad arrow buttons to scroll ZIPIT_Z2 */		
+			if (ev->x == KBD_ENTER) {
+#else
 			if (ev->x == KBD_RIGHT || ev->x == KBD_ENTER) {
+#endif
 				struct link *l;
 				if (fd->vs->current_link >= 0 && fd->vs->current_link < fd->f_data->nlinks) {
 					l = &fd->f_data->links[fd->vs->current_link];
@@ -1218,11 +1263,29 @@
 				html_interpret_recursive(ses->screen);
 				return 1;
 			}
+#if 1 /* ZIPIT_Z2 */
+			/* Add scroll mark for ZIPIT_Z2 ereading. */
+			if (upcase(ev->x) == 'R' && !(ev->y & (KBD_CTRL | KBD_ALT))) return read_scrollmark(ses,fd, 1);
+			if (upcase(ev->x) == 'M' && !(ev->y & (KBD_CTRL | KBD_ALT))) return write_scrollmark(ses,fd); 
+
+			/* Add more convenient page scroll keys for ZIPIT_Z2 */
+			if (ev->x == KBD_PAGE_DOWN || (upcase(ev->x) == 'F' && ev->y & KBD_CTRL)
+			    || (ev->x == KBD_DOWN && (ev->y & (KBD_SHIFT | KBD_ALT))) // added alt or shift dn
+			    ) {
+#else
 			if (ev->x == KBD_PAGE_DOWN || (ev->x == ' ' && !(ev->y & KBD_ALT)) || (upcase(ev->x) == 'F' && ev->y & KBD_CTRL)) {
+#endif
 				unset_link(fd);
 				return scroll_v(fd, fd->yw - fd->hsb * G_SCROLL_BAR_WIDTH);
 			}
+#if 1 /* ZIPIT_Z2 */
+			/* Add more convenient page scroll keys for ZIPIT_Z2 */
+			if (ev->x == KBD_PAGE_UP || (upcase(ev->x) == 'B' && !(ev->y & KBD_ALT))
+			    || (ev->x == KBD_UP && (ev->y & (KBD_SHIFT | KBD_ALT))) // added alt or shift up
+			    ) {
+#else
 			if (ev->x == KBD_PAGE_UP || (upcase(ev->x) == 'B' && !(ev->y & KBD_ALT))) {
+#endif
 				unset_link(fd);
 				return scroll_v(fd, -(fd->yw - fd->hsb * G_SCROLL_BAR_WIDTH));
 			}
@@ -1234,10 +1297,25 @@
 				up:
 				return scroll_v(fd, -64);
 			}
+#if 1 /* ZIPIT_Z2 */
+			/* Add more conveient scroll keys for ZIPIT_Z2 */
+			if (ev->x == KBD_DEL || (upcase(ev->x) == 'N' && ev->y & KBD_CTRL) 
+			    || (ev->x == KBD_DOWN && !(ev->y & (KBD_CTRL | KBD_ALT))) // added down arrow
+			    || (ev->x == ' ' && !(ev->y & KBD_ALT) && !(ev->y & KBD_SHIFT))) {
+
+#else
 			if (ev->x == KBD_DEL || (upcase(ev->x) == 'N' && ev->y & KBD_CTRL)) {
+#endif
 				return scroll_v(fd, 32);
 			}
+#if 1 /* ZIPIT_Z2 */
+			/* Add more conveient scroll keys for ZIPIT_Z2 */
+			if (ev->x == KBD_INS || (upcase(ev->x) == 'P' && ev->y & KBD_CTRL) 
+			    || (ev->x == KBD_UP && !(ev->y & (KBD_CTRL | KBD_ALT))) // added up arrow
+			    || (ev->x == ' ' && !(ev->y & KBD_ALT) && (ev->y & KBD_SHIFT))) {
+#else
 			if (ev->x == KBD_INS || (upcase(ev->x) == 'P' && ev->y & KBD_CTRL)) {
+#endif
 				return scroll_v(fd, -32);
 			}
 			if (/*ev->x == KBD_DOWN*/ 0) {
@@ -1248,6 +1326,48 @@
 				up1:
 				return scroll_v(fd, -16);
 			}
+#if 1 /* ZIPIT_Z2 */
+	
+			/* Allow TAB, BACKTAB to traverse links on ZIPIT_Z2 (mouse eats up,dn keys)*/
+			if ((ev->x == KBD_TAB) && (ev->y & KBD_SHIFT)) {
+				return g_next_link(fd, -1);
+			}
+			if (ev->x == KBD_TAB) {
+				return g_next_link(fd, 1);
+			}
+
+			/* use <,>. for changing fontsize and image scale */	
+			if ((ev->x == '.') || (ev->x == '>') || (ev->x == '}') || (ev->x == ')')) {
+				//zoom in.....   increase the text size and reduce the imageScale
+				ses->ds.image_scale -= 5;
+				ses->ds.font_size++;		
+			//	html_interpret_recursive(fd);
+/*
+				struct graphics_device *dev = ses->term->dev;
+				struct rect r = {0, 0, 0, 0};
+				r.x2 = dev->size.x2, r.y2 = dev->size.y2;
+				t_redraw(dev, &r);
+	*/			
+				t_resize(ses->term->dev);
+//				reload(ses, -1);
+				return 0;
+//				return g_next_link(fd, 1);
+			}
+			if ((ev->x == ',') || (ev->x == '<') || (ev->x == '{') || (ev->x == '(')) {
+				//zoom out.....   reduce the text size and increase the imageScale
+				ses->ds.image_scale += 5;
+				ses->ds.font_size--;
+				t_resize(ses->term->dev);
+				return 0;
+//				return g_next_link(fd, -1);
+			}
+
+			/* Add more conveient sidescroll keys for ZIPIT_Z2 */
+			if ((ev->x == '[')
+			    || (ev->x == KBD_LEFT && !(ev->y & (KBD_CTRL | KBD_ALT))) // added left arrow
+			    ) {
+					
+#else
 			if (ev->x == KBD_DOWN) {
 				return g_next_link(fd, 1);
 			}
@@ -1255,11 +1375,21 @@
 				return g_next_link(fd, -1);
 			}
 			if (ev->x == '[') {
+#endif
 				left:
+ 
 				return scroll_h(fd, -64);
 			}
+#if 1 /* ZIPIT_Z2 */
+			/* Add more conveient sidescroll keys for ZIPIT_Z2 */
+			if ((ev->x == ']')
+			    || (ev->x == KBD_RIGHT && !(ev->y & (KBD_CTRL | KBD_ALT))) // added right arrow
+			    ) { 
+#else
 			if (ev->x == ']') {
+#endif
 				right:
+
 				return scroll_h(fd, 64);
 			}
 			if (/*ev->x == KBD_LEFT*/ 0) {

