--- ./view.c  2013-01-29 08:33:41.551420000 -0800
+++ ./view.c	2013-01-20 15:55:22.227304000 -0800
@@ -3024,15 +3024,31 @@ int frame_ev(struct session *ses, struct
 	if (ev->ev == EV_KBD) {
 #if 1 /* ZIPIT_Z2 */
 		/* Add more conveient scroll keys for ZIPIT_Z2 */
-		if (ev->x == KBD_PAGE_DOWN || (upcase(ev->x) == 'F' && ev->y & KBD_CTRL)) rep_ev(ses, fd, page_down, 0);
+		if (ev->x == KBD_PAGE_DOWN || (upcase(ev->x) == 'F' && ev->y & KBD_CTRL) || (ev->x == KBD_DOWN && ev->y)) rep_ev(ses, fd, page_down, 0);
+		else if (ev->x == KBD_PAGE_UP || (upcase(ev->x) == 'B' && (!(ev->y & KBD_ALT))) || (ev->x == KBD_UP && ev->y)) rep_ev(ses, fd, page_up, 0);
+		else if ((ev->x == KBD_DOWN) || (ev->x == ' ' && !(ev->y & KBD_ALT) && !(ev->y & KBD_SHIFT))) rep_ev(ses, fd, scroll, 1 + !ses->kbdprefix.rep);		  
+		else if ((ev->x == KBD_UP) || (ev->x == ' ' && !(ev->y & KBD_ALT) && (ev->y & KBD_SHIFT))) rep_ev(ses, fd, scroll, -1 - !ses->kbdprefix.rep);
+		/* Use dpad arrow buttons to scroll ZIPIT_Z2 and use <,>. for URLS. */	
+		else if (ev->x == KBD_LEFT) rep_ev(ses, fd, hscroll, -1 - 7 * !ses->kbdprefix.rep);
+		else if (ev->x == KBD_RIGHT) rep_ev(ses, fd, hscroll, 1 + 7 * !ses->kbdprefix.rep);
+		/* Allow TAB, BACKTAB to traverse links on ZIPIT_Z2 */
+		else if ((ev->x == KBD_TAB) && ev->y) rep_ev(ses, fd, up, 0);
+		else if ((ev->x == KBD_TAB) && !ev->y) rep_ev(ses, fd, down, 0); /* Shift-tab doesn't seem to work. */
+		/* Zipit has KBD_INS on alt-tab so use it as backtab, at least until backtab (shift-tab) works. */
+		else if (ev->x == KBD_INS) rep_ev(ses, fd, up, 0);
+		/* Allow <,>. to also traverse links on ZIPIT_Z2 */
+		else if ((ev->x == ',') || (ev->x == '<') || (ev->x == '{') || (ev->x == '(')) rep_ev(ses, fd, up, 0);
+		else if ((ev->x == '.') || (ev->x == '>') || (ev->x == '}') || (ev->x == ')')) rep_ev(ses, fd, down, 0);
+		/* Every form of backup known to man (including ^H) should go back in histroy on Zipit. */
+		else if ((ev->x == KBD_BS) || (ev->x == KBD_DEL) || (ev->x == 8)) back(ses, NULL, 0);
 #else
 		if (ev->x == KBD_PAGE_DOWN || (ev->x == ' ' && (!(ev->y & KBD_ALT))) || (upcase(ev->x) == 'F' && ev->y & KBD_CTRL)) rep_ev(ses, fd, page_down, 0);
-#endif
 		else if (ev->x == KBD_PAGE_UP || (upcase(ev->x) == 'B' && (!(ev->y & KBD_ALT)))) rep_ev(ses, fd, page_up, 0);
 		else if (ev->x == KBD_DOWN) rep_ev(ses, fd, down, 0);
 		else if (ev->x == KBD_UP) rep_ev(ses, fd, up, 0);
 		else if (ev->x == KBD_LEFT && ses->term->spec->braille) rep_ev(ses, fd, left, 0);
 		else if (ev->x == KBD_RIGHT && ses->term->spec->braille) rep_ev(ses, fd, right, 0);
+#endif
 		else if (ev->x == '{' && ses->term->spec->braille) rep_ev(ses, fd, cursor_home, 0);
 		else if (ev->x == '}' && ses->term->spec->braille) rep_ev(ses, fd, cursor_end, 0);
 		else if (upcase(ev->x) == 'Y' && !(ev->y & (KBD_CTRL | KBD_ALT)) && ses->term->spec->braille) rep_ev(ses, fd, cursor_word, 0);
@@ -3049,27 +3065,18 @@ int frame_ev(struct session *ses, struct
 			}
 		}
 		else if (ev->x == KBD_INS || (upcase(ev->x) == 'P' && ev->y & KBD_CTRL)) rep_ev(ses, fd, scroll, -1 - !ses->kbdprefix.rep);
-#if 1 /* ZIPIT_Z2 */
-		/* Add more conveient scroll keys for ZIPIT_Z2 */
-		else if (ev->x == KBD_DEL || (upcase(ev->x) == 'N' && ev->y & KBD_CTRL) 
-			 || (ev->x == ' ' && !(ev->y & KBD_ALT))) 
-		  rep_ev(ses, fd, scroll, 1 + !ses->kbdprefix.rep);
-		/* Allow TAB, BACKTAB to traverse links on ZIPIT_Z2 */
-		else if ((ev->x == KBD_TAB) && (ev->y & KBD_SHIFT)) rep_ev(ses, fd, up, 0);
-		else if (ev->x == KBD_TAB) rep_ev(ses, fd, down, 0);
-		/* Add more conveient sidescroll keys for ZIPIT_Z2 */
-		else if ((ev->x == '[') || (ev->x == ',') || (ev->x == '<')) rep_ev(ses, fd, hscroll, -1 - 7 * !ses->kbdprefix.rep);
-		else if ((ev->x == ']') || (ev->x == '.') || (ev->x == '>')) rep_ev(ses, fd, hscroll, 1 + 7 * !ses->kbdprefix.rep);
-#else
 		else if (ev->x == KBD_DEL || (upcase(ev->x) == 'N' && ev->y & KBD_CTRL)) rep_ev(ses, fd, scroll, 1 + !ses->kbdprefix.rep);
 		else if (ev->x == '[') rep_ev(ses, fd, hscroll, -1 - 7 * !ses->kbdprefix.rep);
 		else if (ev->x == ']') rep_ev(ses, fd, hscroll, 1 + 7 * !ses->kbdprefix.rep);
-#endif
 		/*else if (upcase(ev->x) == 'Y' && ev->y & KBD_CTRL) rep_ev(ses, fd, scroll, -1);
 		else if (upcase(ev->x) == 'E' && ev->y & KBD_CTRL) rep_ev(ses, fd, scroll, 1);*/
 		else if (ev->x == KBD_HOME || (upcase(ev->x) == 'A' && ev->y & KBD_CTRL)) rep_ev(ses, fd, home, 0);
 		else if (ev->x == KBD_END || (upcase(ev->x) == 'E' && ev->y & KBD_CTRL)) rep_ev(ses, fd, x_end, 0);
+#if 1 /* ZIPIT_Z2 */
+		else if (ev->x == KBD_ENTER) {
+#else
 		else if ((ev->x == KBD_RIGHT && !ses->term->spec->braille) || ev->x == KBD_ENTER) {
+#endif
 			/*if (ses->term->spec->braille && !fd->vs->brl_in_field && fd->vs->current_link >= 0 && fd->vs->current_link < fd->f_data->nlinks) {
 				struct link *l = &fd->f_data->links[fd->vs->current_link];
 				if (l->type != L_FIELD && l->type != L_AREA) goto real_link;
@@ -3425,11 +3432,26 @@ void send_event(struct session *ses, str
 			activate_bfu_technology(ses, 0);
 			goto x;
 		}
+/*		if (ev->x == KBD_TAB && (ev->y & KBD_CTRL)){
+			
+			clr_xl(ses->screen);
+	//		draw_formatted(ses);
+			usleep(200000000);
+			SDL_WM_IconifyWindow();	
+			goto x;
+  		}
+*/
 		if (ev->x == KBD_TAB){
 			next_frame(ses, ev->y ? -1 : 1);
 			draw_formatted(ses);
   		}
-#if 0 /* ZIPIT_Z2 */
+#if 1 /* ZIPIT_Z2 */
+		/* Use dpad arrow buttons to scroll ZIPIT_Z2 and use <,>. for URLS. */	
+		if ((ev->x == KBD_BS) || (ev->x == KBD_DEL) || (ev->x == 8)) { /* 0x127 or 0x8 */
+			back(ses, NULL, 0);
+			goto x;
+		}
+#else
 		if (ev->x == KBD_LEFT && !ses->term->spec->braille) {
 			back(ses, NULL, 0);
 			goto x;
