--- flatzebra-0.1.6~/src/flatzebra/GameEngine.h	2012-07-13 23:15:57.000000000 -0400
+++ flatzebra-0.1.6/src/flatzebra/GameEngine.h	2016-02-07 16:07:27.892291058 -0500
@@ -145,6 +145,9 @@
         */
 
     SDL_Surface *theSDLScreen;
+#if 1 // ZIPIT_Z2
+    SDL_Surface *theSDLDisplay;
+#endif
 
     SDL_Surface *fixedWidthFontPixmap;
 
@@ -247,9 +250,14 @@
         Never called if processActiveEvent argument of constructor is false.
     */
 
+#if 1 // ZIPIT_Z2
+    void sdl_Flip(void);
+#endif
+
 private:
 
     void putpixel(SDL_Surface *surface, int x, int y, Uint32 pixel);
+    Uint32 getpixel(SDL_Surface *surface, int x, int y);
     void initWuLineAlgorithm();
     void wu_line(SDL_Surface *surface,
                 Uint32 x0, Uint32 y0, Uint32 x1, Uint32 y1,
--- flatzebra-0.1.6~/src/flatzebra/GameEngine.cpp	2016-02-08 08:03:33.790144644 -0500
+++ flatzebra-0.1.6/src/flatzebra/GameEngine.cpp	2016-02-08 19:39:57.790761438 -0500
@@ -153,7 +153,11 @@
         if (!tick())  // virtual function
             return;
 
+#if 1 // ZIPIT_Z2
+	sdl_Flip();
+#else
         SDL_Flip(theSDLScreen);
+#endif
 
         // Pause for the rest of the current animation frame.
         Uint32 limit = lastTime + millisecondsPerFrame;
@@ -173,7 +177,11 @@
 
     // Allow effect of drawing commands made by processActivation() to appear.
     //
+#if 1 // ZIPIT_Z2
+    sdl_Flip();
+#else
     SDL_Flip(theSDLScreen);
+#endif
 
     // Sleep on SDL event loop until reactivation.
     //
@@ -304,6 +312,87 @@
 
 ///////////////////////////////////////////////////////////////////////////////
 
+#if 1 // ZIPIT_Z2
+void
+GameEngine::sdl_Flip(void)
+{
+  if (theSDLDisplay) {
+    int x, y;
+    SDL_PixelFormat *fmt = theSDLScreen->format;
+    if (fmt->BytesPerPixel == 2){
+      // Use fast 16bpp average algorithm from compuphase.com/graphic/scale3.htm 
+      Uint8 *p = (Uint8 *)theSDLScreen->pixels;
+      Uint32 a, b, c, m; // Three pixel values to work with and the underflow mask.
+      m = 0xffff & ~((1 << fmt->Rshift) | (1 << fmt->Rshift) | (1 << fmt->Rshift));
+      for (y=0; y<240; y++) {
+	for (x=0; x<320; x++) {
+	  // Average 2 pixels from one row.
+	  a = *(Uint32 *)p;
+	  b = a >> 16;
+	  a &= 0xffff;
+	  a = (((a ^ b) & m) >> 1) + (a & b); 
+	  // Average 2 pixels from next row.
+	  c = *(Uint32 *)(p+theSDLScreen->pitch);
+	  b = c >> 16;
+	  c &= 0xffff;
+	  c = (((c ^ b) & m) >> 1) + (c & b); 
+	  // Average the average pixels to squeeze 2x2 pixels to 1..
+	  a = (((a ^ c) & m) >> 1) + (a & c); 
+	  putpixel(theSDLDisplay, x, y, a);
+	  p += 4;
+ 	}
+	p += theSDLScreen->pitch;
+      }      
+    }
+    else {
+      Uint32 pixel;
+      for (y=0; y<240; y++) {
+	for (x=0; x<320; x++) {
+	  pixel = getpixel(theSDLScreen, x*2, y*2);
+	  putpixel(theSDLDisplay, x, y, pixel);
+	}
+      }
+    }
+    SDL_Flip(theSDLDisplay);
+  }
+  else
+    SDL_Flip(theSDLScreen);
+}
+
+
+Uint32
+GameEngine::getpixel(SDL_Surface *surface, int x, int y)
+{
+    int bpp = surface->format->BytesPerPixel;
+    /* Here p is the address to the pixel we want to retrieve */
+    Uint8 *p = (Uint8 *)surface->pixels + y * surface->pitch + x * bpp;
+
+    switch(bpp) {
+    case 1:
+        return *p;
+        break;
+
+    case 2:
+        return *(Uint16 *)p;
+        break;
+
+    case 3:
+        if(SDL_BYTEORDER == SDL_BIG_ENDIAN)
+            return p[0] << 16 | p[1] << 8 | p[2];
+        else
+            return p[0] | p[1] << 8 | p[2] << 16;
+        break;
+
+    case 4:
+        return *(Uint32 *)p;
+        break;
+
+    default:
+        return 0;       /* shouldn't happen, but avoids warnings */
+    }
+}
+#endif
+
 
 void
 GameEngine::putpixel(SDL_Surface *surface, int x, int y, Uint32 pixel)
